generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  role          UserRole    @default(USER)
  timezone      String?     @default("UTC")
  locale        String?     @default("en")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deleted       Boolean     @default(false)
  lastLoginAt   DateTime?   @map("last_login_at")
  accounts      Account[]
  githubAuth    GitHubAuth?
  sessions      Session[]

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  githubUserId      String    @map("github_user_id")
  githubUsername    String    @map("github_username")
  githubNodeId      String?   @map("github_node_id")
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?   @map("twitter_username")
  publicRepos       Int?      @map("public_repos")
  publicGists       Int?      @map("public_gists")
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime? @map("github_created_at")
  githubUpdatedAt   DateTime? @map("github_updated_at")
  accountType       String?   @map("account_type")
  scopes            String[]  @default([])
  organizationsHash String?   @map("organizations_hash")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

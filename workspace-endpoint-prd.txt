PRD: Workspace Management Endpoints
Overview
Create workspace management endpoints in a new workspace-service to handle workspace creation and retrieval. These are internal endpoints for managing user workspaces and their associated repositories.
Service Architecture
File Structure
Copysrc/
├── services/
│   └── workspace-service/
│       ├── controllers/
│       │   └── workspace.controller.ts
│       ├── routes/
│       │   └── workspace.routes.ts
│       ├── middleware/
│       │   ├── auth.middleware.ts
│       │   └── validation.middleware.ts
│       ├── utils/
│       │   ├── workspace.utils.ts
│       │   └── repository.utils.ts
│       ├── types/
│       │   └── workspace.types.ts
│       └── index.ts
├── shared/
│   ├── prisma/
│   │   └── schema.prisma
│   └── middleware/
│       └── auth.ts
└── package.json
Endpoint Specifications
1. POST /workspaces
Purpose: Create a new workspace for the authenticated user
Authentication

Required: Valid JWT token
Authorization: Any authenticated user can create workspaces

Request Body
jsonCopy{
  "name": "string",           // required, 3-50 characters
  "description": "string",    // optional, max 500 characters
  "repository_url": "string"  // optional, valid Git repository URL
}
Request Validation
name

Required field
3-50 characters
Alphanumeric, spaces, hyphens, underscores allowed
Must be unique per user

description

Optional field
Max 500 characters

repository_url

Optional field
Must be valid Git URL (GitHub, GitLab, Bitbucket)
Format: https://github.com/owner/repo or https://gitlab.com/owner/repo

Business Logic Flow

Authentication Check: Verify JWT token
Input Validation: Validate request parameters
Uniqueness Check: Ensure workspace name is unique for user
Slug Generation: Create URL-friendly slug from name
Database Transaction:

Create workspace record
Create repository record (if repository_url provided)


Response: Return created workspace details

Success Response (201 Created)
jsonCopy{
  "success": true,
  "message": "Workspace created successfully",
  "data": {
    "id": "cm123abc456",
    "name": "My Awesome Project",
    "description": "A project for analyzing React codebase",
    "slug": "my-awesome-project",
    "created_at": "2024-01-15T10:30:00Z",
    "updated_at": "2024-01-15T10:30:00Z",
    "owner": {
      "id": "cm456def789",
      "name": "John Doe",
      "email": "john@example.com"
    },
    "repositories": [
      {
        "id": "cm789ghi012",
        "name": "react-app",
        "repository_url": "https://github.com/user/react-app",
        "branch": "main",
        "status": "PENDING"
      }
    ],
    "swarm": null,
    "member_count": 1
  }
}
Error Responses
400 Bad Request - Validation Error
jsonCopy{
  "success": false,
  "message": "Validation failed",
  "error": "VALIDATION_ERROR",
  "details": {
    "name": ["Name must be between 3 and 50 characters"],
    "repository_url": ["Invalid repository URL format"]
  }
}
409 Conflict - Duplicate Name
jsonCopy{
  "success": false,
  "message": "Workspace name already exists",
  "error": "DUPLICATE_WORKSPACE_NAME"
}
2. GET /workspaces
Purpose: Retrieve all workspaces for the authenticated user
Authentication

Required: Valid JWT token
Authorization: Users can only see their own workspaces

Query Parameters
Copy?page=1&limit=10&sort=created_at&order=desc&search=project
page (optional)

Default: 1
Min: 1

limit (optional)

Default: 10
Min: 1, Max: 100

sort (optional)

Default: "created_at"
Allowed: "created_at", "updated_at", "name"

order (optional)

Default: "desc"
Allowed: "asc", "desc"

search (optional)

Search in workspace name and description
Min 2 characters

Business Logic Flow

Authentication Check: Verify JWT token
Query Validation: Validate query parameters
Database Query:

Filter by user ownership
Apply search filters
Apply pagination and sorting
Include related data (repositories, swarm, member count)


Response: Return paginated workspace list

Success Response (200 OK)
jsonCopy{
  "success": true,
  "message": "Workspaces retrieved successfully",
  "data": {
    "workspaces": [
      {
        "id": "cm123abc456",
        "name": "My Awesome Project",
        "description": "A project for analyzing React codebase",
        "slug": "my-awesome-project",
        "created_at": "2024-01-15T10:30:00Z",
        "updated_at": "2024-01-15T10:30:00Z",
        "repositories": [
          {
            "id": "cm789ghi012",
            "name": "react-app",
            "repository_url": "https://github.com/user/react-app",
            "branch": "main",
            "status": "PENDING"
          }
        ],
        "swarm": {
          "id": "cm345jkl678",
          "name": "awesome-project-swarm",
          "swarm_url": "https://awesome-project-swarm.sphinx.chat",
          "status": "ACTIVE"
        },
        "member_count": 3
      }
    ],
    "pagination": {
      "current_page": 1,
      "per_page": 10,
      "total": 25,
      "total_pages": 3,
      "has_next": true,
      "has_prev": false
    }
  }
}
Error Responses
400 Bad Request - Invalid Query Parameters
jsonCopy{
  "success": false,
  "message": "Invalid query parameters",
  "error": "INVALID_QUERY_PARAMS",
  "details": {
    "page": ["Page must be a positive integer"],
    "limit": ["Limit must be between 1 and 100"]
  }
}
401 Unauthorized - Invalid Token
jsonCopy{
  "success": false,
  "message": "Authentication required",
  "error": "UNAUTHORIZED"
}
Database Operations
Create Workspace with Repository
typescriptCopyconst workspace = await prisma.workspace.create({
  data: {
    name: request.name,
    description: request.description,
    slug: generateSlug(request.name),
    ownerId: user.id,
    repositories: request.repository_url ? {
      create: {
        name: extractRepoName(request.repository_url),
        repositoryUrl: request.repository_url,
        branch: 'main',
        status: 'PENDING'
      }
    } : undefined
  },
  include: {
    owner: {
      select: { id: true, name: true, email: true }
    },
    repositories: true,
    swarm: true,
    members: true
  }
});
Get User Workspaces
typescriptCopyconst workspaces = await prisma.workspace.findMany({
  where: {
    ownerId: user.id,
    OR: search ? [
      { name: { contains: search, mode: 'insensitive' } },
      { description: { contains: search, mode: 'insensitive' } }
    ] : undefined
  },
  include: {
    repositories: true,
    swarm: true,
    _count: {
      select: { members: true }
    }
  },
  orderBy: { [sort]: order },
  skip: (page - 1) * limit,
  take: limit
});
Utility Functions
Repository URL Validation
typescriptCopyfunction validateRepositoryUrl(url: string): boolean {
  const githubPattern = /^https:\/\/github\.com\/[A-Za-z0-9_.-]+\/[A-Za-z0-9_.-]+$/;
  const gitlabPattern = /^https:\/\/gitlab\.com\/[A-Za-z0-9_.-]+\/[A-Za-z0-9_.-]+$/;
  const bitbucketPattern = /^https:\/\/bitbucket\.org\/[A-Za-z0-9_.-]+\/[A-Za-z0-9_.-]+$/;
  
  return githubPattern.test(url) || gitlabPattern.test(url) || bitbucketPattern.test(url);
}
Slug Generation
typescriptCopyfunction generateSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}
Technical Implementation Notes

Implement proper JWT token validation middleware
Add input sanitization to prevent XSS attacks
Implement database transactions for workspace creation
Add comprehensive logging for debugging and monitoring
Follow RESTful API conventions
Add rate limiting to prevent abuse
Implement proper error handling and logging

Testing Requirements

Unit tests for validation functions
Unit tests for slug generation
Integration tests for database operations
Authentication and authorization tests
Pagination and search functionality tests
Error handling tests for various failure scenarios
End-to-end tests for complete workflows

Security Considerations

Validate JWT tokens on every request
Implement rate limiting (e.g., 100 requests per hour per user)
Sanitize all input parameters
Log security-relevant events
Ensure users can only access their own workspaces
Validate repository URLs to prevent SSRF attacks
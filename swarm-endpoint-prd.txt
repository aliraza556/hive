PRD: Swarm Creation Endpoint
Overview
Create a new endpoint in the pool-manager service to integrate with the swarm_superadmin third-party service for swarm creation. This endpoint creates and links a swarm to an existing workspace.
Endpoint Specification
POST /codegraph/swarm
Service: pool-manager
Authentication

Required: Valid JWT token
Authorization: User must be the owner of the specified workspace

Request Body
jsonCopy{
  "workspace_id": "string", // required, valid workspace ID that user owns
  "name": "string"          // required, valid domain name format
}
Request Validation
workspace_id

Required field
Must be a valid workspace ID (cuid format)
Workspace must exist in database
Authenticated user must be the owner of the workspace
Workspace must not already have a swarm associated

name

Required field
Must be a valid domain name (1-63 characters per label)
Allowed characters: alphanumeric (a-z, A-Z, 0-9) and hyphens
Cannot start or end with hyphen
Cannot contain consecutive hyphens
Total length: 1-253 characters
Case insensitive
Must be unique across all swarms

Business Logic Flow

Authentication Check: Verify JWT token
Workspace Validation:

Verify workspace exists
Verify user owns workspace
Verify workspace doesn't already have a swarm


Domain Name Validation: Validate name parameter
Uniqueness Check: Ensure swarm name is unique
Database Record Creation: Create swarm record with status "PENDING"
Third-Party API Call: Call swarm_superadmin service
Database Update: Update swarm status based on API response
Response: Return success/failure to client

Third-Party Integration
Target Service: swarm_superadmin

URL: https://app.superadmin.sphinx.chat/api/v1/swarms
Method: POST
Headers:

x-api-token: {SWARM_SUPERADMIN_API_KEY} (from .env)
Content-Type: application/json



Request Payload to swarm_superadmin:
jsonCopy{
  "name": "{name_from_request}",
  "vanity_address": "{name_from_request}",
  "instance_type": "XL",
  "envs": {
    "JARVIS_FEATURE_FLAG_CODEGRAPH_SCHEMAS": "true",
    "JARVIS_FEATURE_FLAG_WFA_SCHEMAS": "true"
  }
}
Database Operations
Create Swarm Record
typescriptCopyconst swarm = await prisma.swarm.create({
  data: {
    name: request.name,
    swarmUrl: `https://${request.name}.sphinx.chat`,
    status: 'PENDING',
    instanceType: 'XL',
    workspaceId: request.workspace_id
  }
});
Update Swarm Status
typescriptCopy// On successful swarm_superadmin response
await prisma.swarm.update({
  where: { id: swarm.id },
  data: { status: 'ACTIVE' }
});

// On failed swarm_superadmin response
await prisma.swarm.update({
  where: { id: swarm.id },
  data: { status: 'FAILED' }
});
Response Handling
Success Response (201 Created)
jsonCopy{
  "success": true,
  "message": "Swarm successfully created",
  "data": {
    "swarm_id": "cm123abc456",
    "name": "my-swarm",
    "swarm_url": "https://my-swarm.sphinx.chat",
    "status": "ACTIVE",
    "workspace_id": "cm789def012",
    "created_at": "2024-01-15T10:30:00Z"
  }
}
Error Responses
400 Bad Request - Validation Error
jsonCopy{
  "success": false,
  "message": "Invalid domain name format",
  "error": "VALIDATION_ERROR",
  "details": "Domain name must be 1-253 characters and contain only alphanumeric characters and hyphens"
}
401 Unauthorized - Invalid Token
jsonCopy{
  "success": false,
  "message": "Authentication required",
  "error": "UNAUTHORIZED"
}
403 Forbidden - Not Workspace Owner
jsonCopy{
  "success": false,
  "message": "You are not authorized to create swarms for this workspace",
  "error": "FORBIDDEN"
}
404 Not Found - Workspace Not Found
jsonCopy{
  "success": false,
  "message": "Workspace not found",
  "error": "WORKSPACE_NOT_FOUND"
}
409 Conflict - Swarm Already Exists
jsonCopy{
  "success": false,
  "message": "Workspace already has a swarm associated",
  "error": "SWARM_ALREADY_EXISTS"
}
409 Conflict - Domain Name Taken
jsonCopy{
  "success": false,
  "message": "Domain name is already taken",
  "error": "DOMAIN_NAME_TAKEN"
}
500 Internal Server Error - Third-party Service Error
jsonCopy{
  "success": false,
  "message": "Failed to create swarm infrastructure",
  "error": "SWARM_CREATION_FAILED"
}
Error Handling Strategy

Timeout: 30 seconds for swarm_superadmin API calls
Retry Logic: 3 attempts with exponential backoff (1s, 2s, 4s)
Transaction Rollback: If swarm_superadmin fails, update database record to FAILED status
Logging: Log all requests/responses for debugging
Graceful Degradation: Return meaningful error messages to client

Environment Variables
envCopySWARM_SUPERADMIN_API_KEY=your_api_key_here
Database Schema Requirements
Based on the corrected Prisma schema:
prismaCopymodel Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members WorkspaceMember[]
  swarm   Swarm?
  repositories Repository[]
  tasks   Task[]

  @@map("workspaces")
}

model Swarm {
  id           String      @id @default(cuid())
  name         String      @unique
  swarmUrl     String?     @map("swarm_url")
  status       SwarmStatus @default(PENDING)
  instanceType String      @default("XL") @map("instance_type")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  workspaceId String @unique @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("swarms")
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}
Technical Implementation Notes

Implement proper JWT token validation middleware
Add domain name validation utility function
Implement workspace ownership verification
Add database transaction handling for swarm creation
Follow existing pool-manager service patterns and conventions
Add comprehensive logging for debugging and monitoring

Testing Requirements

Unit tests for domain name validation
Unit tests for workspace ownership verification
Integration tests for swarm_superadmin API calls
Error handling tests for various failure scenarios
Database transaction tests
Authentication and authorization tests
End-to-end tests for complete flow

Security Considerations

Validate JWT tokens on every request
Implement rate limiting to prevent abuse
Sanitize input parameters to prevent injection attacks
Log security-relevant events (unauthorized access attempts)
Ensure API keys are properly secured and rotated
Add to Conversation